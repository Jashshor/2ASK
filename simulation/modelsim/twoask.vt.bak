// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/06/2017 19:31:33"
                                                                                
// Verilog Test Bench template for design : twoask
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module twoask_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
// wires                                               
wire f_ref_c;
wire fpga_ext_trig;
wire m_squence;
wire pin_da_clk;
wire [9:0]  pin_da_dataout;
wire pin_da_reset;
wire pin_da_sel;
wire pin_da_wr;
wire [7:0]  two_ask;

// assign statements (if any)                          
twoask i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.f_ref_c(f_ref_c),
	.fpga_ext_trig(fpga_ext_trig),
	.m_squence(m_squence),
	.pin_da_clk(pin_da_clk),
	.pin_da_dataout(pin_da_dataout),
	.pin_da_reset(pin_da_reset),
	.pin_da_sel(pin_da_sel),
	.pin_da_wr(pin_da_wr),
	.two_ask(two_ask)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  clk<=1'b1;                                                     
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
    #100000 clk=-clk                                                   
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

